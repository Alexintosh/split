/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import { CTokenPriceOracle } from "./CTokenPriceOracle";

export class CTokenPriceOracleFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<CTokenPriceOracle> {
    return super.deploy(overrides || {}) as Promise<CTokenPriceOracle>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): CTokenPriceOracle {
    return super.attach(address) as CTokenPriceOracle;
  }
  connect(signer: Signer): CTokenPriceOracleFactory {
    return super.connect(signer) as CTokenPriceOracleFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CTokenPriceOracle {
    return new Contract(address, _abi, signerOrProvider) as CTokenPriceOracle;
  }
}

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "cTokenAddress",
        type: "address"
      }
    ],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506104c3806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806341976e0914610030575b600080fd5b61004a600480360381019061004591906102c0565b610060565b60405161005791906103d3565b60405180910390f35b60008082905060008173ffffffffffffffffffffffffffffffffffffffff1663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b1580156100ae57600080fd5b505afa1580156100c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e69190610312565b905060008273ffffffffffffffffffffffffffffffffffffffff16636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561013057600080fd5b505afa158015610144573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016891906102e9565b905060008173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156101b257600080fd5b505afa1580156101c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ea919061033b565b60ff1690506000600a9050600061020a838361021790919063ffffffff16565b9050505050505050919050565b600080828401905083811015610262576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610259906103b3565b60405180910390fd5b8091505092915050565b60008135905061027b81610448565b92915050565b60008151905061029081610448565b92915050565b6000815190506102a58161045f565b92915050565b6000815190506102ba81610476565b92915050565b6000602082840312156102d257600080fd5b60006102e08482850161026c565b91505092915050565b6000602082840312156102fb57600080fd5b600061030984828501610281565b91505092915050565b60006020828403121561032457600080fd5b600061033284828501610296565b91505092915050565b60006020828403121561034d57600080fd5b600061035b848285016102ab565b91505092915050565b6000610371601b836103ee565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6103ad81610431565b82525050565b600060208201905081810360008301526103cc81610364565b9050919050565b60006020820190506103e860008301846103a4565b92915050565b600082825260208201905092915050565b600061040a82610411565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b610451816103ff565b811461045c57600080fd5b50565b61046881610431565b811461047357600080fd5b50565b61047f8161043b565b811461048a57600080fd5b5056fea2646970667358221220e1c783b079cc79a49d087c2e7772615a3257a6d412c9c2b39b4fad038ffa4f5b64736f6c63430006080033";
