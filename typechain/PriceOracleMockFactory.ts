/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import { PriceOracleMock } from "./PriceOracleMock";

export class PriceOracleMockFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<PriceOracleMock> {
    return super.deploy(overrides || {}) as Promise<PriceOracleMock>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): PriceOracleMock {
    return super.attach(address) as PriceOracleMock;
  }
  connect(signer: Signer): PriceOracleMockFactory {
    return super.connect(signer) as PriceOracleMockFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PriceOracleMock {
    return new Contract(address, _abi, signerOrProvider) as PriceOracleMock;
  }
}

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      }
    ],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256"
      }
    ],
    name: "setPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];

const _bytecode =
  "0x60806040526000805534801561001457600080fd5b506101e2806100246000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806341976e091461003b57806391b7f5ed1461006b575b600080fd5b610055600480360381019061005091906100c6565b610087565b6040516100629190610127565b60405180910390f35b610085600480360381019061008091906100ef565b610092565b005b600080549050919050565b8060008190555050565b6000813590506100ab8161017e565b92915050565b6000813590506100c081610195565b92915050565b6000602082840312156100d857600080fd5b60006100e68482850161009c565b91505092915050565b60006020828403121561010157600080fd5b600061010f848285016100b1565b91505092915050565b61012181610174565b82525050565b600060208201905061013c6000830184610118565b92915050565b600061014d82610154565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b61018781610142565b811461019257600080fd5b50565b61019e81610174565b81146101a957600080fd5b5056fea2646970667358221220aa20ef72fe7297db1319c99927abccf27c4650f625cfdf61131fe817ab112a5a64736f6c63430006080033";
