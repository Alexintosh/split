/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SplitVaultInterface extends ethers.utils.Interface {
  functions: {
    "add(address,address,address)": FunctionFragment;
    "getComponentSet(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "payout(uint256,address,address)": FunctionFragment;
    "recombine(uint256,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "split(uint256,address)": FunctionFragment;
    "tokensToComponents(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "add",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getComponentSet",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payout",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "recombine",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "split",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensToComponents",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getComponentSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recombine", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "split", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensToComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class SplitVault extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SplitVaultInterface;

  functions: {
    add(
      tokenAddress: string,
      yieldTokenAddress: string,
      capitalTokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "add(address,address,address)"(
      tokenAddress: string,
      yieldTokenAddress: string,
      capitalTokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getComponentSet(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: { yieldToken: string; capitalToken: string; 0: string; 1: string };
    }>;

    "getComponentSet(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: { yieldToken: string; capitalToken: string; 0: string; 1: string };
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    payout(
      amount: BigNumberish,
      tokenAddress: string,
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "payout(uint256,address,address)"(
      amount: BigNumberish,
      tokenAddress: string,
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    recombine(
      amount: BigNumberish,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "recombine(uint256,address)"(
      amount: BigNumberish,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    split(
      amount: BigNumberish,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "split(uint256,address)"(
      amount: BigNumberish,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokensToComponents(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      yieldToken: string;
      capitalToken: string;
      0: string;
      1: string;
    }>;

    "tokensToComponents(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      yieldToken: string;
      capitalToken: string;
      0: string;
      1: string;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  add(
    tokenAddress: string,
    yieldTokenAddress: string,
    capitalTokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "add(address,address,address)"(
    tokenAddress: string,
    yieldTokenAddress: string,
    capitalTokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getComponentSet(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<{
    yieldToken: string;
    capitalToken: string;
    0: string;
    1: string;
  }>;

  "getComponentSet(address)"(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<{
    yieldToken: string;
    capitalToken: string;
    0: string;
    1: string;
  }>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  payout(
    amount: BigNumberish,
    tokenAddress: string,
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "payout(uint256,address,address)"(
    amount: BigNumberish,
    tokenAddress: string,
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  recombine(
    amount: BigNumberish,
    tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "recombine(uint256,address)"(
    amount: BigNumberish,
    tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  split(
    amount: BigNumberish,
    tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "split(uint256,address)"(
    amount: BigNumberish,
    tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokensToComponents(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    yieldToken: string;
    capitalToken: string;
    0: string;
    1: string;
  }>;

  "tokensToComponents(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    yieldToken: string;
    capitalToken: string;
    0: string;
    1: string;
  }>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    add(
      tokenAddress: string,
      yieldTokenAddress: string,
      capitalTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "add(address,address,address)"(
      tokenAddress: string,
      yieldTokenAddress: string,
      capitalTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getComponentSet(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      yieldToken: string;
      capitalToken: string;
      0: string;
      1: string;
    }>;

    "getComponentSet(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      yieldToken: string;
      capitalToken: string;
      0: string;
      1: string;
    }>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    payout(
      amount: BigNumberish,
      tokenAddress: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "payout(uint256,address,address)"(
      amount: BigNumberish,
      tokenAddress: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    recombine(
      amount: BigNumberish,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "recombine(uint256,address)"(
      amount: BigNumberish,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    split(
      amount: BigNumberish,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "split(uint256,address)"(
      amount: BigNumberish,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tokensToComponents(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      yieldToken: string;
      capitalToken: string;
      0: string;
      1: string;
    }>;

    "tokensToComponents(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      yieldToken: string;
      capitalToken: string;
      0: string;
      1: string;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    add(
      tokenAddress: string,
      yieldTokenAddress: string,
      capitalTokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "add(address,address,address)"(
      tokenAddress: string,
      yieldTokenAddress: string,
      capitalTokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getComponentSet(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getComponentSet(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    payout(
      amount: BigNumberish,
      tokenAddress: string,
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "payout(uint256,address,address)"(
      amount: BigNumberish,
      tokenAddress: string,
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    recombine(
      amount: BigNumberish,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "recombine(uint256,address)"(
      amount: BigNumberish,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    split(
      amount: BigNumberish,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "split(uint256,address)"(
      amount: BigNumberish,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokensToComponents(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokensToComponents(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    add(
      tokenAddress: string,
      yieldTokenAddress: string,
      capitalTokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "add(address,address,address)"(
      tokenAddress: string,
      yieldTokenAddress: string,
      capitalTokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getComponentSet(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getComponentSet(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payout(
      amount: BigNumberish,
      tokenAddress: string,
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "payout(uint256,address,address)"(
      amount: BigNumberish,
      tokenAddress: string,
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    recombine(
      amount: BigNumberish,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "recombine(uint256,address)"(
      amount: BigNumberish,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    split(
      amount: BigNumberish,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "split(uint256,address)"(
      amount: BigNumberish,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokensToComponents(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokensToComponents(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
