/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SplitVaultCompInterface extends ethers.utils.Interface {
  functions: {
    "mint(uint256,address)": FunctionFragment;
    "tokensToComponents(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensToComponents",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensToComponents",
    data: BytesLike
  ): Result;

  events: {};
}

export class SplitVaultComp extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SplitVaultCompInterface;

  functions: {
    mint(
      amount: BigNumberish,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(uint256,address)"(
      amount: BigNumberish,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokensToComponents(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      yieldToken: string;
      capitalToken: string;
      0: string;
      1: string;
    }>;

    "tokensToComponents(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      yieldToken: string;
      capitalToken: string;
      0: string;
      1: string;
    }>;
  };

  mint(
    amount: BigNumberish,
    tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(uint256,address)"(
    amount: BigNumberish,
    tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokensToComponents(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    yieldToken: string;
    capitalToken: string;
    0: string;
    1: string;
  }>;

  "tokensToComponents(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    yieldToken: string;
    capitalToken: string;
    0: string;
    1: string;
  }>;

  callStatic: {
    mint(
      amount: BigNumberish,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(uint256,address)"(
      amount: BigNumberish,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tokensToComponents(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      yieldToken: string;
      capitalToken: string;
      0: string;
      1: string;
    }>;

    "tokensToComponents(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      yieldToken: string;
      capitalToken: string;
      0: string;
      1: string;
    }>;
  };

  filters: {};

  estimateGas: {
    mint(
      amount: BigNumberish,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mint(uint256,address)"(
      amount: BigNumberish,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokensToComponents(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokensToComponents(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    mint(
      amount: BigNumberish,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(uint256,address)"(
      amount: BigNumberish,
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokensToComponents(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokensToComponents(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
